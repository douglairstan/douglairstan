/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view.escola;

import base.ctr.BaseCTR;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static main.DesktopSGU.jDesktopPaneSGUVIEW;

/**
 *
 * @author Douglas Estanislau Pereira
 */
public class BibliotecaVIEW extends javax.swing.JInternalFrame {

    /**
     * Creates new form BibliotecaVIEW
     */
    public BibliotecaVIEW() {
        initComponents();
        Iniciar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelisbn = new javax.swing.JLabel();
        jButtonGravar = new javax.swing.JButton();
        jTextFieldisbn = new javax.swing.JTextField();
        jLabelTipo = new javax.swing.JLabel();
        jComboBoxTipo = new javax.swing.JComboBox();
        jLabelNome = new javax.swing.JLabel();
        jTextFieldTituloAcervo = new javax.swing.JTextField();
        jLabelColecao = new javax.swing.JLabel();
        jButtonAddTipo = new javax.swing.JButton();
        jTextFieldNPaginas = new javax.swing.JTextField();
        jLabelNPaginas = new javax.swing.JLabel();
        jTextFieldVolume = new javax.swing.JTextField();
        jLabelVolume = new javax.swing.JLabel();
        jLabelLinguagem = new javax.swing.JLabel();
        jComboBoxLinguagem = new javax.swing.JComboBox();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanelTombo = new javax.swing.JPanel();
        jTextFieldTombo = new javax.swing.JTextField();
        jLabelTombo = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTableTombo = new javax.swing.JTable();
        jLabelAutorCodigo1 = new javax.swing.JLabel();
        jTextFieldTomboCodigo = new javax.swing.JTextField();
        jButtonAddTomboAcervo = new javax.swing.JButton();
        jPanelOutros = new javax.swing.JPanel();
        jLabelClassLiter2 = new javax.swing.JLabel();
        jComboBoxOutros = new javax.swing.JComboBox();
        jButtonAddOutros = new javax.swing.JButton();
        jButtonAddOutrosLivro = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTableOutros = new javax.swing.JTable();
        jLabelOutrosCodigo = new javax.swing.JLabel();
        jTextFieldOutrosCodigo = new javax.swing.JTextField();
        jTextFieldOutrosNome = new javax.swing.JTextField();
        jLabelOutrosNome = new javax.swing.JLabel();
        jButtonConsultarTipoAcervo = new javax.swing.JButton();
        jPanelAutor = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableAutor = new javax.swing.JTable();
        jButtonAddAutorLivro = new javax.swing.JButton();
        jLabelAutorCodigo = new javax.swing.JLabel();
        jTextFieldAutorCodigo = new javax.swing.JTextField();
        jLabelAutor = new javax.swing.JLabel();
        jTextFieldAutor = new javax.swing.JTextField();
        jPanelClassLiter = new javax.swing.JPanel();
        jLabelClassLiter = new javax.swing.JLabel();
        jComboBoxClassLiter = new javax.swing.JComboBox();
        jButtonAddClassLiter = new javax.swing.JButton();
        jButtonAddClassLiterLivro = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableClassLiter = new javax.swing.JTable();
        jLabelClassLiterCodigo = new javax.swing.JLabel();
        jTextFieldClassLiterCodigo = new javax.swing.JTextField();
        jPanelGenero = new javax.swing.JPanel();
        jLabelGenero = new javax.swing.JLabel();
        jComboBoxGenero = new javax.swing.JComboBox();
        jButtonAddGenero = new javax.swing.JButton();
        jButtonAddGeneroLivro = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTableGenero = new javax.swing.JTable();
        jLabelClassLiterCodigo1 = new javax.swing.JLabel();
        jTextFieldGeneroCodigo = new javax.swing.JTextField();
        jPanelEdicao = new javax.swing.JPanel();
        jLabelEdicao = new javax.swing.JLabel();
        jButtonAddEdicaoLivro = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableEdicao = new javax.swing.JTable();
        jTextFieldEdicaoNumero = new javax.swing.JTextField();
        jTextFieldEdicaoCidade = new javax.swing.JTextField();
        jLabelEdicaoCidade = new javax.swing.JLabel();
        jLabelEdicaoAno = new javax.swing.JLabel();
        jTextFieldEdicaoAno = new javax.swing.JTextField();
        jLabelEdicaoCodigo = new javax.swing.JLabel();
        jTextFieldEdicaoCodigo = new javax.swing.JTextField();
        jPanelTag = new javax.swing.JPanel();
        jLabelTag = new javax.swing.JLabel();
        jButtonAddTagLivro = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableTag = new javax.swing.JTable();
        jLabelTagCodigo = new javax.swing.JLabel();
        jTextFieldTagCodigo = new javax.swing.JTextField();
        jTextFieldTag = new javax.swing.JTextField();
        jPanelSerieAno = new javax.swing.JPanel();
        jLabelSerieAno = new javax.swing.JLabel();
        jComboBoxSerieAno = new javax.swing.JComboBox();
        jButtonAddSerieAno = new javax.swing.JButton();
        jButtonAddSerieAnoLivro = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTableSerieAno = new javax.swing.JTable();
        jLabelSerieAnoCodigo = new javax.swing.JLabel();
        jTextFieldSerieAnoCodigo = new javax.swing.JTextField();
        jPanelResumo = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaResumo = new javax.swing.JTextArea();
        jButtonPesquisar = new javax.swing.JButton();
        jButtonSair = new javax.swing.JButton();
        jButtonAddLinguagem = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabelNome1 = new javax.swing.JLabel();
        jTextFieldSubTituloAcervo = new javax.swing.JTextField();
        jTextFieldEditora = new javax.swing.JTextField();
        jTextFieldColecao = new javax.swing.JTextField();

        setTitle("Biblioteca");
        setMinimumSize(new java.awt.Dimension(800, 600));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(null);

        jLabelisbn.setText("ISBN:");
        getContentPane().add(jLabelisbn);
        jLabelisbn.setBounds(330, 40, 51, 18);

        jButtonGravar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lib/png/48x48/Gravar48.png"))); // NOI18N
        jButtonGravar.setToolTipText("Gravar ou Alterar Acervo");
        jButtonGravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGravarActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonGravar);
        jButtonGravar.setBounds(0, 0, 80, 80);

        jTextFieldisbn.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jTextFieldisbn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldisbnKeyPressed(evt);
            }
        });
        getContentPane().add(jTextFieldisbn);
        jTextFieldisbn.setBounds(330, 60, 122, 28);

        jLabelTipo.setText("Tipo:");
        getContentPane().add(jLabelTipo);
        jLabelTipo.setBounds(20, 100, 70, 18);

        jComboBoxTipo.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        getContentPane().add(jComboBoxTipo);
        jComboBoxTipo.setBounds(20, 120, 130, 28);

        jLabelNome.setText("Título:");
        getContentPane().add(jLabelNome);
        jLabelNome.setBounds(20, 160, 60, 18);

        jTextFieldTituloAcervo.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        getContentPane().add(jTextFieldTituloAcervo);
        jTextFieldTituloAcervo.setBounds(20, 180, 570, 28);

        jLabelColecao.setText("Coleção:");
        getContentPane().add(jLabelColecao);
        jLabelColecao.setBounds(470, 100, 100, 18);

        jButtonAddTipo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lib/png/16x16/add16.png"))); // NOI18N
        jButtonAddTipo.setToolTipText("Adicionar Tipo de Acervo");
        jButtonAddTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddTipoActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonAddTipo);
        jButtonAddTipo.setBounds(150, 120, 30, 28);

        jTextFieldNPaginas.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        getContentPane().add(jTextFieldNPaginas);
        jTextFieldNPaginas.setBounds(600, 180, 80, 28);

        jLabelNPaginas.setText("N° Páginas:");
        getContentPane().add(jLabelNPaginas);
        jLabelNPaginas.setBounds(600, 160, 100, 18);

        jTextFieldVolume.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        getContentPane().add(jTextFieldVolume);
        jTextFieldVolume.setBounds(690, 180, 80, 28);

        jLabelVolume.setText("Volume:");
        getContentPane().add(jLabelVolume);
        jLabelVolume.setBounds(690, 160, 70, 18);

        jLabelLinguagem.setText("Linguagem:");
        getContentPane().add(jLabelLinguagem);
        jLabelLinguagem.setBounds(530, 220, 100, 18);

        jComboBoxLinguagem.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jComboBoxLinguagem.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PORTUGUÊS", "INGLÊS", "PORTUGUÊS/INGLÊS", "INGLÊS/PORTUGUÊS" }));
        getContentPane().add(jComboBoxLinguagem);
        jComboBoxLinguagem.setBounds(530, 240, 210, 28);

        jTabbedPane1.setToolTipText("Adicionar Gênero");

        jPanelTombo.setLayout(null);

        jTextFieldTombo.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jTextFieldTombo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldTomboKeyPressed(evt);
            }
        });
        jPanelTombo.add(jTextFieldTombo);
        jTextFieldTombo.setBounds(20, 40, 150, 28);

        jLabelTombo.setText("Tombo:");
        jPanelTombo.add(jLabelTombo);
        jLabelTombo.setBounds(20, 20, 70, 18);

        jTableTombo.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jTableTombo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código:", "Tombo:"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane9.setViewportView(jTableTombo);
        if (jTableTombo.getColumnModel().getColumnCount() > 0) {
            jTableTombo.getColumnModel().getColumn(0).setMinWidth(30);
            jTableTombo.getColumnModel().getColumn(0).setPreferredWidth(30);
            jTableTombo.getColumnModel().getColumn(1).setMinWidth(300);
            jTableTombo.getColumnModel().getColumn(1).setPreferredWidth(300);
        }

        jPanelTombo.add(jScrollPane9);
        jScrollPane9.setBounds(20, 90, 710, 100);

        jLabelAutorCodigo1.setText("Código:");
        jPanelTombo.add(jLabelAutorCodigo1);
        jLabelAutorCodigo1.setBounds(20, 200, 60, 18);

        jTextFieldTomboCodigo.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jTextFieldTomboCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldTomboCodigoKeyPressed(evt);
            }
        });
        jPanelTombo.add(jTextFieldTomboCodigo);
        jTextFieldTomboCodigo.setBounds(80, 200, 60, 28);

        jButtonAddTomboAcervo.setText("Add. Tombo");
        jButtonAddTomboAcervo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddTomboAcervoActionPerformed(evt);
            }
        });
        jPanelTombo.add(jButtonAddTomboAcervo);
        jButtonAddTomboAcervo.setBounds(170, 40, 130, 30);

        jTabbedPane1.addTab("Tombo:", jPanelTombo);

        jPanelOutros.setLayout(null);

        jLabelClassLiter2.setText("Tipo:");
        jPanelOutros.add(jLabelClassLiter2);
        jLabelClassLiter2.setBounds(50, 20, 60, 18);

        jComboBoxOutros.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jPanelOutros.add(jComboBoxOutros);
        jComboBoxOutros.setBounds(50, 40, 220, 28);

        jButtonAddOutros.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lib/png/16x16/add16.png"))); // NOI18N
        jButtonAddOutros.setToolTipText("Adicionar Outras Informações");
        jButtonAddOutros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddOutrosActionPerformed(evt);
            }
        });
        jPanelOutros.add(jButtonAddOutros);
        jButtonAddOutros.setBounds(270, 40, 30, 28);

        jButtonAddOutrosLivro.setText("Add. Equipe");
        jButtonAddOutrosLivro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddOutrosLivroActionPerformed(evt);
            }
        });
        jPanelOutros.add(jButtonAddOutrosLivro);
        jButtonAddOutrosLivro.setBounds(600, 40, 130, 30);

        jTableOutros.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jTableOutros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código:", "Tipo:", "Nome:"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(jTableOutros);
        if (jTableOutros.getColumnModel().getColumnCount() > 0) {
            jTableOutros.getColumnModel().getColumn(0).setMinWidth(30);
            jTableOutros.getColumnModel().getColumn(1).setMinWidth(200);
            jTableOutros.getColumnModel().getColumn(2).setMinWidth(200);
        }

        jPanelOutros.add(jScrollPane7);
        jScrollPane7.setBounds(20, 90, 710, 100);

        jLabelOutrosCodigo.setText("Código:");
        jPanelOutros.add(jLabelOutrosCodigo);
        jLabelOutrosCodigo.setBounds(20, 200, 60, 18);

        jTextFieldOutrosCodigo.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jTextFieldOutrosCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldOutrosCodigoKeyPressed(evt);
            }
        });
        jPanelOutros.add(jTextFieldOutrosCodigo);
        jTextFieldOutrosCodigo.setBounds(80, 200, 60, 28);

        jTextFieldOutrosNome.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jTextFieldOutrosNome.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldOutrosNomeKeyPressed(evt);
            }
        });
        jPanelOutros.add(jTextFieldOutrosNome);
        jTextFieldOutrosNome.setBounds(310, 40, 290, 28);

        jLabelOutrosNome.setText("Nome:");
        jPanelOutros.add(jLabelOutrosNome);
        jLabelOutrosNome.setBounds(310, 20, 46, 18);

        jButtonConsultarTipoAcervo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lib/png/16x16/consultar16.png"))); // NOI18N
        jButtonConsultarTipoAcervo.setToolTipText("Consultar Outras Informações através do tipo do Acervo");
        jButtonConsultarTipoAcervo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultarTipoAcervoActionPerformed(evt);
            }
        });
        jPanelOutros.add(jButtonConsultarTipoAcervo);
        jButtonConsultarTipoAcervo.setBounds(20, 40, 30, 28);

        jTabbedPane1.addTab("Equipe:", jPanelOutros);

        jPanelAutor.setLayout(null);

        jTableAutor.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jTableAutor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código:", "Autor:"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableAutor);
        if (jTableAutor.getColumnModel().getColumnCount() > 0) {
            jTableAutor.getColumnModel().getColumn(0).setMinWidth(30);
            jTableAutor.getColumnModel().getColumn(1).setMinWidth(300);
        }

        jPanelAutor.add(jScrollPane1);
        jScrollPane1.setBounds(20, 90, 710, 100);

        jButtonAddAutorLivro.setText("Add. Autor");
        jButtonAddAutorLivro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddAutorLivroActionPerformed(evt);
            }
        });
        jPanelAutor.add(jButtonAddAutorLivro);
        jButtonAddAutorLivro.setBounds(330, 40, 130, 30);

        jLabelAutorCodigo.setText("Código:");
        jPanelAutor.add(jLabelAutorCodigo);
        jLabelAutorCodigo.setBounds(20, 200, 60, 18);

        jTextFieldAutorCodigo.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jTextFieldAutorCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldAutorCodigoKeyPressed(evt);
            }
        });
        jPanelAutor.add(jTextFieldAutorCodigo);
        jTextFieldAutorCodigo.setBounds(80, 200, 60, 28);

        jLabelAutor.setText("Nome:");
        jPanelAutor.add(jLabelAutor);
        jLabelAutor.setBounds(22, 20, 60, 18);

        jTextFieldAutor.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jTextFieldAutor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldAutorKeyPressed(evt);
            }
        });
        jPanelAutor.add(jTextFieldAutor);
        jTextFieldAutor.setBounds(20, 40, 310, 27);

        jTabbedPane1.addTab("Autor(a):", jPanelAutor);

        jPanelClassLiter.setLayout(null);

        jLabelClassLiter.setText("Nome:");
        jPanelClassLiter.add(jLabelClassLiter);
        jLabelClassLiter.setBounds(22, 20, 60, 18);

        jComboBoxClassLiter.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jPanelClassLiter.add(jComboBoxClassLiter);
        jComboBoxClassLiter.setBounds(20, 40, 550, 28);

        jButtonAddClassLiter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lib/png/16x16/add16.png"))); // NOI18N
        jButtonAddClassLiter.setToolTipText("Adicionar Classificação Literária");
        jButtonAddClassLiter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddClassLiterActionPerformed(evt);
            }
        });
        jPanelClassLiter.add(jButtonAddClassLiter);
        jButtonAddClassLiter.setBounds(570, 40, 30, 28);

        jButtonAddClassLiterLivro.setText("Add. Class. Liter.");
        jButtonAddClassLiterLivro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddClassLiterLivroActionPerformed(evt);
            }
        });
        jPanelClassLiter.add(jButtonAddClassLiterLivro);
        jButtonAddClassLiterLivro.setBounds(600, 40, 130, 30);

        jTableClassLiter.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jTableClassLiter.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código:", "Nome:"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTableClassLiter);
        if (jTableClassLiter.getColumnModel().getColumnCount() > 0) {
            jTableClassLiter.getColumnModel().getColumn(0).setMinWidth(30);
            jTableClassLiter.getColumnModel().getColumn(1).setMinWidth(300);
        }

        jPanelClassLiter.add(jScrollPane3);
        jScrollPane3.setBounds(20, 90, 710, 100);

        jLabelClassLiterCodigo.setText("Código:");
        jPanelClassLiter.add(jLabelClassLiterCodigo);
        jLabelClassLiterCodigo.setBounds(20, 200, 60, 18);

        jTextFieldClassLiterCodigo.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jTextFieldClassLiterCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldClassLiterCodigoKeyPressed(evt);
            }
        });
        jPanelClassLiter.add(jTextFieldClassLiterCodigo);
        jTextFieldClassLiterCodigo.setBounds(80, 200, 60, 28);

        jTabbedPane1.addTab("Class. Literária:", jPanelClassLiter);

        jPanelGenero.setLayout(null);

        jLabelGenero.setText("Nome:");
        jPanelGenero.add(jLabelGenero);
        jLabelGenero.setBounds(22, 20, 60, 18);

        jComboBoxGenero.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jPanelGenero.add(jComboBoxGenero);
        jComboBoxGenero.setBounds(20, 40, 550, 28);

        jButtonAddGenero.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lib/png/16x16/add16.png"))); // NOI18N
        jButtonAddGenero.setToolTipText("Adicionar Coleção");
        jButtonAddGenero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddGeneroActionPerformed(evt);
            }
        });
        jPanelGenero.add(jButtonAddGenero);
        jButtonAddGenero.setBounds(570, 40, 30, 28);

        jButtonAddGeneroLivro.setText("Add. Gênero");
        jButtonAddGeneroLivro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddGeneroLivroActionPerformed(evt);
            }
        });
        jPanelGenero.add(jButtonAddGeneroLivro);
        jButtonAddGeneroLivro.setBounds(600, 40, 130, 30);

        jTableGenero.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jTableGenero.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código:", "Nome:"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane8.setViewportView(jTableGenero);
        if (jTableGenero.getColumnModel().getColumnCount() > 0) {
            jTableGenero.getColumnModel().getColumn(0).setMinWidth(30);
            jTableGenero.getColumnModel().getColumn(1).setMinWidth(300);
        }

        jPanelGenero.add(jScrollPane8);
        jScrollPane8.setBounds(20, 90, 710, 100);

        jLabelClassLiterCodigo1.setText("Código:");
        jPanelGenero.add(jLabelClassLiterCodigo1);
        jLabelClassLiterCodigo1.setBounds(20, 200, 60, 18);

        jTextFieldGeneroCodigo.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jTextFieldGeneroCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldGeneroCodigoKeyPressed(evt);
            }
        });
        jPanelGenero.add(jTextFieldGeneroCodigo);
        jTextFieldGeneroCodigo.setBounds(80, 200, 60, 28);

        jTabbedPane1.addTab("Gênero:", jPanelGenero);

        jPanelEdicao.setLayout(null);

        jLabelEdicao.setText("Número:");
        jPanelEdicao.add(jLabelEdicao);
        jLabelEdicao.setBounds(22, 20, 90, 18);

        jButtonAddEdicaoLivro.setText("Add. Edição");
        jButtonAddEdicaoLivro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddEdicaoLivroActionPerformed(evt);
            }
        });
        jPanelEdicao.add(jButtonAddEdicaoLivro);
        jButtonAddEdicaoLivro.setBounds(600, 40, 130, 30);

        jTableEdicao.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jTableEdicao.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código:", "Número:", "Cidade/UF:", "Ano:"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTableEdicao);
        if (jTableEdicao.getColumnModel().getColumnCount() > 0) {
            jTableEdicao.getColumnModel().getColumn(0).setMinWidth(30);
            jTableEdicao.getColumnModel().getColumn(1).setMinWidth(30);
            jTableEdicao.getColumnModel().getColumn(2).setMinWidth(300);
            jTableEdicao.getColumnModel().getColumn(3).setMinWidth(30);
        }

        jPanelEdicao.add(jScrollPane4);
        jScrollPane4.setBounds(20, 90, 710, 100);

        jTextFieldEdicaoNumero.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jPanelEdicao.add(jTextFieldEdicaoNumero);
        jTextFieldEdicaoNumero.setBounds(20, 40, 80, 28);

        jTextFieldEdicaoCidade.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jPanelEdicao.add(jTextFieldEdicaoCidade);
        jTextFieldEdicaoCidade.setBounds(110, 40, 330, 28);

        jLabelEdicaoCidade.setText("Cidade/UF:");
        jPanelEdicao.add(jLabelEdicaoCidade);
        jLabelEdicaoCidade.setBounds(110, 20, 110, 18);

        jLabelEdicaoAno.setText("Ano:");
        jPanelEdicao.add(jLabelEdicaoAno);
        jLabelEdicaoAno.setBounds(450, 20, 51, 18);

        jTextFieldEdicaoAno.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jPanelEdicao.add(jTextFieldEdicaoAno);
        jTextFieldEdicaoAno.setBounds(450, 40, 150, 28);

        jLabelEdicaoCodigo.setText("Código:");
        jPanelEdicao.add(jLabelEdicaoCodigo);
        jLabelEdicaoCodigo.setBounds(20, 200, 60, 18);

        jTextFieldEdicaoCodigo.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jTextFieldEdicaoCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldEdicaoCodigoKeyPressed(evt);
            }
        });
        jPanelEdicao.add(jTextFieldEdicaoCodigo);
        jTextFieldEdicaoCodigo.setBounds(80, 200, 60, 28);

        jTabbedPane1.addTab("Edição:", jPanelEdicao);

        jPanelTag.setLayout(null);

        jLabelTag.setText("Nome:");
        jPanelTag.add(jLabelTag);
        jLabelTag.setBounds(22, 20, 60, 18);

        jButtonAddTagLivro.setText("Add. TAG");
        jButtonAddTagLivro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddTagLivroActionPerformed(evt);
            }
        });
        jPanelTag.add(jButtonAddTagLivro);
        jButtonAddTagLivro.setBounds(420, 40, 100, 30);

        jTableTag.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jTableTag.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código:", "Nome:"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(jTableTag);
        if (jTableTag.getColumnModel().getColumnCount() > 0) {
            jTableTag.getColumnModel().getColumn(0).setMinWidth(30);
            jTableTag.getColumnModel().getColumn(1).setMinWidth(300);
        }

        jPanelTag.add(jScrollPane5);
        jScrollPane5.setBounds(20, 90, 710, 100);

        jLabelTagCodigo.setText("Código:");
        jPanelTag.add(jLabelTagCodigo);
        jLabelTagCodigo.setBounds(20, 200, 60, 18);

        jTextFieldTagCodigo.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jTextFieldTagCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldTagCodigoKeyPressed(evt);
            }
        });
        jPanelTag.add(jTextFieldTagCodigo);
        jTextFieldTagCodigo.setBounds(80, 200, 60, 28);

        jTextFieldTag.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jTextFieldTag.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldTagKeyPressed(evt);
            }
        });
        jPanelTag.add(jTextFieldTag);
        jTextFieldTag.setBounds(20, 40, 400, 28);

        jTabbedPane1.addTab("Tag:", jPanelTag);

        jPanelSerieAno.setLayout(null);

        jLabelSerieAno.setText("Nome:");
        jPanelSerieAno.add(jLabelSerieAno);
        jLabelSerieAno.setBounds(22, 20, 60, 18);

        jComboBoxSerieAno.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jComboBoxSerieAno.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AINDA EM DESENVOLVIMENTO PELO PROGRAMADOR" }));
        jPanelSerieAno.add(jComboBoxSerieAno);
        jComboBoxSerieAno.setBounds(20, 40, 550, 28);

        jButtonAddSerieAno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lib/png/16x16/add16.png"))); // NOI18N
        jButtonAddSerieAno.setToolTipText("Adicionar Séria/Ano");
        jPanelSerieAno.add(jButtonAddSerieAno);
        jButtonAddSerieAno.setBounds(570, 40, 30, 28);

        jButtonAddSerieAnoLivro.setText("Add. Série/Ano");
        jPanelSerieAno.add(jButtonAddSerieAnoLivro);
        jButtonAddSerieAnoLivro.setBounds(600, 40, 130, 30);

        jTableSerieAno.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jTableSerieAno.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código:", "Séria/Ano:"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(jTableSerieAno);
        if (jTableSerieAno.getColumnModel().getColumnCount() > 0) {
            jTableSerieAno.getColumnModel().getColumn(0).setMinWidth(30);
            jTableSerieAno.getColumnModel().getColumn(1).setMinWidth(300);
        }

        jPanelSerieAno.add(jScrollPane6);
        jScrollPane6.setBounds(20, 90, 710, 100);

        jLabelSerieAnoCodigo.setText("Código:");
        jPanelSerieAno.add(jLabelSerieAnoCodigo);
        jLabelSerieAnoCodigo.setBounds(20, 200, 60, 18);

        jTextFieldSerieAnoCodigo.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jPanelSerieAno.add(jTextFieldSerieAnoCodigo);
        jTextFieldSerieAnoCodigo.setBounds(80, 200, 60, 28);

        jTabbedPane1.addTab("Séria/Ano:", jPanelSerieAno);

        jPanelResumo.setLayout(null);

        jTextAreaResumo.setColumns(20);
        jTextAreaResumo.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jTextAreaResumo.setRows(5);
        jScrollPane2.setViewportView(jTextAreaResumo);

        jPanelResumo.add(jScrollPane2);
        jScrollPane2.setBounds(10, 7, 830, 230);

        jTabbedPane1.addTab("Resumo:", jPanelResumo);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(20, 280, 860, 280);

        jButtonPesquisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lib/png/48x48/Consultar48.png"))); // NOI18N
        jButtonPesquisar.setToolTipText("Pesquisar Acervo");
        jButtonPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPesquisarActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonPesquisar);
        jButtonPesquisar.setBounds(80, 0, 80, 80);

        jButtonSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lib/png/48x48/Sair48.png"))); // NOI18N
        jButtonSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSairActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonSair);
        jButtonSair.setBounds(160, 0, 80, 80);

        jButtonAddLinguagem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lib/png/16x16/add16.png"))); // NOI18N
        jButtonAddLinguagem.setToolTipText("Adicionar Linguagem");
        getContentPane().add(jButtonAddLinguagem);
        jButtonAddLinguagem.setBounds(740, 240, 30, 28);

        jLabel1.setText("Editora:");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(190, 100, 70, 18);

        jLabelNome1.setText("Sub. Título:");
        getContentPane().add(jLabelNome1);
        jLabelNome1.setBounds(20, 220, 130, 18);

        jTextFieldSubTituloAcervo.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        getContentPane().add(jTextFieldSubTituloAcervo);
        jTextFieldSubTituloAcervo.setBounds(20, 240, 500, 28);

        jTextFieldEditora.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jTextFieldEditora.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldEditoraKeyPressed(evt);
            }
        });
        getContentPane().add(jTextFieldEditora);
        jTextFieldEditora.setBounds(190, 120, 270, 28);

        jTextFieldColecao.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jTextFieldColecao.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldColecaoKeyPressed(evt);
            }
        });
        getContentPane().add(jTextFieldColecao);
        jTextFieldColecao.setBounds(470, 120, 270, 28);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSairActionPerformed
        // TODO add your handling code here:
        int i = JOptionPane.showConfirmDialog(null, "Para Sair clique em SIM ou Para Abrir outra Janela clique em NÃO!  ","Informação: ", JOptionPane.YES_NO_OPTION);
            if(i == JOptionPane.YES_OPTION){
                Sair();
            }else{
                BibliotecaVIEW f = new BibliotecaVIEW();
                jDesktopPaneSGUVIEW.add(f);
                f.setVisible(true);
                Sair();
            } 
    }//GEN-LAST:event_jButtonSairActionPerformed

    private void jButtonAddClassLiterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddClassLiterActionPerformed
        // TODO add your handling code here:
        InserirClassLiteraria();
        //ConsultarClassLiteraria();
    }//GEN-LAST:event_jButtonAddClassLiterActionPerformed

    private void jButtonAddAutorLivroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddAutorLivroActionPerformed
        // TODO add your handling code here:
        InserirAutorAcervo();
    }//GEN-LAST:event_jButtonAddAutorLivroActionPerformed

    private void jTextFieldisbnKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldisbnKeyPressed
        // TODO add your handling code here:
       if (evt.getKeyCode() == evt.VK_ENTER){
          LimparCampos();
          ConsultarAcervo();
          MostrarDadosTabelaAutorAcervo();
          MostrarDadosTabelaClassLiterAcervo();
          MostrarDadosTabelaTagAcervo();
          MostrarDadosTabelaGeneroAcervo();
          MostrarDadosTabelaEdicaoAcervo();
          MostrarDadosTabelaOutrosAcervo();
          MostrarDadosTabelaTomboAcervo(); 
       }
        
    }//GEN-LAST:event_jTextFieldisbnKeyPressed

    private void jButtonAddClassLiterLivroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddClassLiterLivroActionPerformed
        // TODO add your handling code here:
        InserirClassLiterAcervo();
    }//GEN-LAST:event_jButtonAddClassLiterLivroActionPerformed

    private void jButtonAddTagLivroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddTagLivroActionPerformed
        // TODO add your handling code here:
        InserirTagAcervo();
    }//GEN-LAST:event_jButtonAddTagLivroActionPerformed

    private void jButtonAddGeneroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddGeneroActionPerformed
        // TODO add your handling code here:
        InserirGenero();
        //ConsultarGenero();
    }//GEN-LAST:event_jButtonAddGeneroActionPerformed

    private void jButtonAddGeneroLivroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddGeneroLivroActionPerformed
        // TODO add your handling code here:
        InserirGeneroAcervo();
    }//GEN-LAST:event_jButtonAddGeneroLivroActionPerformed

    private void jButtonAddEdicaoLivroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddEdicaoLivroActionPerformed
        // TODO add your handling code here:
        InserirEdicaoAcervo();
    }//GEN-LAST:event_jButtonAddEdicaoLivroActionPerformed

    private void jButtonConsultarTipoAcervoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultarTipoAcervoActionPerformed
        // TODO add your handling code here:
        ConsultarOutros();
    }//GEN-LAST:event_jButtonConsultarTipoAcervoActionPerformed

    private void jButtonAddOutrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddOutrosActionPerformed
        // TODO add your handling code here:
        InserirOutros();
    }//GEN-LAST:event_jButtonAddOutrosActionPerformed

    private void jButtonAddOutrosLivroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddOutrosLivroActionPerformed
        // TODO add your handling code here:
        InserirOutrosAcervo();
    }//GEN-LAST:event_jButtonAddOutrosLivroActionPerformed

    private void jButtonGravarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGravarActionPerformed
        // TODO add your handling code here:
        //InserirAcervo();
        int f = jTextFieldisbn.getText().length();
        if (f == 13){
            ConsultarAcervoVerificador();
        }else{
            int i = JOptionPane.showConfirmDialog(null, "Há somente "+f+" de 13 Dígitos no ISBN. Deseja Gravar mesmo assim?  ","Informação: ", JOptionPane.YES_NO_OPTION);
            if(i == JOptionPane.YES_OPTION){
                ConsultarAcervoVerificador();
            }else{
                jTextFieldisbn.setText("");
                jTextFieldisbn.requestFocus();
            }    
        }
    }//GEN-LAST:event_jButtonGravarActionPerformed

    private void jButtonPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPesquisarActionPerformed
        // TODO add your handling code here:
        BibliotecaConsultaDIALOG  jDialog = new BibliotecaConsultaDIALOG(null, true);
        jDialog.setModal(true);
        jDialog.setVisible(true);
        jTextFieldisbn.setText(jDialog.getGetisbn());
    }//GEN-LAST:event_jButtonPesquisarActionPerformed

    private void jButtonAddTomboAcervoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddTomboAcervoActionPerformed
        // TODO add your handling code here:
        //InserirTomboAcervo();
        //VerificarTomboAcervo();
        ConsultarVerificadorTombo();
    }//GEN-LAST:event_jButtonAddTomboAcervoActionPerformed

    private void jTextFieldTomboCodigoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldTomboCodigoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == evt.VK_ENTER){
            RemoverTomboAcervo();
        }
    }//GEN-LAST:event_jTextFieldTomboCodigoKeyPressed

    private void jTextFieldAutorCodigoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldAutorCodigoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == evt.VK_ENTER){
            RemoverAutorAcervo();
        }
    }//GEN-LAST:event_jTextFieldAutorCodigoKeyPressed

    private void jTextFieldClassLiterCodigoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldClassLiterCodigoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == evt.VK_ENTER){
            RemoverClassLiterAcervo();
        }
    }//GEN-LAST:event_jTextFieldClassLiterCodigoKeyPressed

    private void jTextFieldGeneroCodigoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldGeneroCodigoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == evt.VK_ENTER){
            RemoverGeneroAcervo();
        }
    }//GEN-LAST:event_jTextFieldGeneroCodigoKeyPressed

    private void jTextFieldEdicaoCodigoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldEdicaoCodigoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == evt.VK_ENTER){
            RemoverEdicaoAcervo();
        }
    }//GEN-LAST:event_jTextFieldEdicaoCodigoKeyPressed

    private void jTextFieldTagCodigoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldTagCodigoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == evt.VK_ENTER){
            RemoverTagAcervo();
        }
    }//GEN-LAST:event_jTextFieldTagCodigoKeyPressed

    private void jTextFieldOutrosCodigoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldOutrosCodigoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == evt.VK_ENTER){
            RemoverOutrosAcervo();
        }
    }//GEN-LAST:event_jTextFieldOutrosCodigoKeyPressed

    private void jButtonAddTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddTipoActionPerformed
        // TODO add your handling code here:
        InserirTipoAcervo();
    }//GEN-LAST:event_jButtonAddTipoActionPerformed

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
        // TODO add your handling code here:
        jTextFieldisbn.requestFocus();
    }//GEN-LAST:event_formInternalFrameActivated

    private void jTextFieldTomboKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldTomboKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == evt.VK_ENTER){
            jButtonAddTomboAcervo.doClick();
        }
    }//GEN-LAST:event_jTextFieldTomboKeyPressed

    private void jTextFieldAutorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldAutorKeyPressed
        // TODO add your handling code here:
         if (evt.getKeyCode() == evt.VK_ENTER){
            BibliotecaConsultaAutorDIALOG  jDialog = new BibliotecaConsultaAutorDIALOG(null, true);
            jDialog.setModal(true);
            jDialog.setVisible(true);
            jTextFieldAutor.setText(jDialog.getAutor());
        }
    }//GEN-LAST:event_jTextFieldAutorKeyPressed

    private void jTextFieldOutrosNomeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldOutrosNomeKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == evt.VK_ENTER){
            BibliotecaConsultaAutorDIALOG  jDialog = new BibliotecaConsultaAutorDIALOG(null, true);
            jDialog.setModal(true);
            jDialog.setVisible(true);
            jTextFieldOutrosNome.setText(jDialog.getAutor());
        }
    }//GEN-LAST:event_jTextFieldOutrosNomeKeyPressed

    private void jTextFieldEditoraKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldEditoraKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == evt.VK_ENTER){
            BibliotecaConsultaEditoraDIALOG  jDialog = new BibliotecaConsultaEditoraDIALOG(null, true);
            jDialog.setModal(true);
            jDialog.setVisible(true);
            jTextFieldEditora.setText(jDialog.getEditora());
        }
    }//GEN-LAST:event_jTextFieldEditoraKeyPressed

    private void jTextFieldColecaoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldColecaoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == evt.VK_ENTER){
            BibliotecaConsultaColecaoDIALOG  jDialog = new BibliotecaConsultaColecaoDIALOG(null, true);
            jDialog.setModal(true);
            jDialog.setVisible(true);
            jTextFieldColecao.setText(jDialog.getColecao());
        }
    }//GEN-LAST:event_jTextFieldColecaoKeyPressed

    private void jTextFieldTagKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldTagKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == evt.VK_ENTER){
            BibliotecaConsultaTagDIALOG  jDialog = new BibliotecaConsultaTagDIALOG(null, true);
            jDialog.setModal(true);
            jDialog.setVisible(true);
            jTextFieldTag.setText(jDialog.getTag());
        }
    }//GEN-LAST:event_jTextFieldTagKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddAutorLivro;
    private javax.swing.JButton jButtonAddClassLiter;
    private javax.swing.JButton jButtonAddClassLiterLivro;
    private javax.swing.JButton jButtonAddEdicaoLivro;
    private javax.swing.JButton jButtonAddGenero;
    private javax.swing.JButton jButtonAddGeneroLivro;
    private javax.swing.JButton jButtonAddLinguagem;
    private javax.swing.JButton jButtonAddOutros;
    private javax.swing.JButton jButtonAddOutrosLivro;
    private javax.swing.JButton jButtonAddSerieAno;
    private javax.swing.JButton jButtonAddSerieAnoLivro;
    private javax.swing.JButton jButtonAddTagLivro;
    private javax.swing.JButton jButtonAddTipo;
    private javax.swing.JButton jButtonAddTomboAcervo;
    private javax.swing.JButton jButtonConsultarTipoAcervo;
    private javax.swing.JButton jButtonGravar;
    private javax.swing.JButton jButtonPesquisar;
    private javax.swing.JButton jButtonSair;
    private javax.swing.JComboBox jComboBoxClassLiter;
    private javax.swing.JComboBox jComboBoxGenero;
    private javax.swing.JComboBox jComboBoxLinguagem;
    private javax.swing.JComboBox jComboBoxOutros;
    private javax.swing.JComboBox jComboBoxSerieAno;
    private javax.swing.JComboBox jComboBoxTipo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelAutor;
    private javax.swing.JLabel jLabelAutorCodigo;
    private javax.swing.JLabel jLabelAutorCodigo1;
    private javax.swing.JLabel jLabelClassLiter;
    private javax.swing.JLabel jLabelClassLiter2;
    private javax.swing.JLabel jLabelClassLiterCodigo;
    private javax.swing.JLabel jLabelClassLiterCodigo1;
    private javax.swing.JLabel jLabelColecao;
    private javax.swing.JLabel jLabelEdicao;
    private javax.swing.JLabel jLabelEdicaoAno;
    private javax.swing.JLabel jLabelEdicaoCidade;
    private javax.swing.JLabel jLabelEdicaoCodigo;
    private javax.swing.JLabel jLabelGenero;
    private javax.swing.JLabel jLabelLinguagem;
    private javax.swing.JLabel jLabelNPaginas;
    private javax.swing.JLabel jLabelNome;
    private javax.swing.JLabel jLabelNome1;
    private javax.swing.JLabel jLabelOutrosCodigo;
    private javax.swing.JLabel jLabelOutrosNome;
    private javax.swing.JLabel jLabelSerieAno;
    private javax.swing.JLabel jLabelSerieAnoCodigo;
    private javax.swing.JLabel jLabelTag;
    private javax.swing.JLabel jLabelTagCodigo;
    private javax.swing.JLabel jLabelTipo;
    private javax.swing.JLabel jLabelTombo;
    private javax.swing.JLabel jLabelVolume;
    private javax.swing.JLabel jLabelisbn;
    private javax.swing.JPanel jPanelAutor;
    private javax.swing.JPanel jPanelClassLiter;
    private javax.swing.JPanel jPanelEdicao;
    private javax.swing.JPanel jPanelGenero;
    private javax.swing.JPanel jPanelOutros;
    private javax.swing.JPanel jPanelResumo;
    private javax.swing.JPanel jPanelSerieAno;
    private javax.swing.JPanel jPanelTag;
    private javax.swing.JPanel jPanelTombo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableAutor;
    private javax.swing.JTable jTableClassLiter;
    private javax.swing.JTable jTableEdicao;
    private javax.swing.JTable jTableGenero;
    private javax.swing.JTable jTableOutros;
    private javax.swing.JTable jTableSerieAno;
    private javax.swing.JTable jTableTag;
    private javax.swing.JTable jTableTombo;
    private javax.swing.JTextArea jTextAreaResumo;
    private javax.swing.JTextField jTextFieldAutor;
    private javax.swing.JTextField jTextFieldAutorCodigo;
    private javax.swing.JTextField jTextFieldClassLiterCodigo;
    private javax.swing.JTextField jTextFieldColecao;
    private javax.swing.JTextField jTextFieldEdicaoAno;
    private javax.swing.JTextField jTextFieldEdicaoCidade;
    private javax.swing.JTextField jTextFieldEdicaoCodigo;
    private javax.swing.JTextField jTextFieldEdicaoNumero;
    private javax.swing.JTextField jTextFieldEditora;
    private javax.swing.JTextField jTextFieldGeneroCodigo;
    private javax.swing.JTextField jTextFieldNPaginas;
    private javax.swing.JTextField jTextFieldOutrosCodigo;
    private javax.swing.JTextField jTextFieldOutrosNome;
    private javax.swing.JTextField jTextFieldSerieAnoCodigo;
    private javax.swing.JTextField jTextFieldSubTituloAcervo;
    private javax.swing.JTextField jTextFieldTag;
    private javax.swing.JTextField jTextFieldTagCodigo;
    private javax.swing.JTextField jTextFieldTituloAcervo;
    private javax.swing.JTextField jTextFieldTombo;
    private javax.swing.JTextField jTextFieldTomboCodigo;
    private javax.swing.JTextField jTextFieldVolume;
    private javax.swing.JTextField jTextFieldisbn;
    // End of variables declaration//GEN-END:variables

    // Inicia juntamente com o Sistema
    public void Iniciar() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        this.setSize(900, 600);
        this.setTitle("Biblioteca - Cadastrar Acervo");
        jTabbedPane1.remove(jPanelSerieAno);
        jTabbedPane1.remove(jPanelGenero);
        jTabbedPane1.remove(jPanelClassLiter);
        jTabbedPane1.remove(jPanelAutor);
        //jTextFieldQtd.setText("1");
        //ConsultarEditora();
        //ConsultarClassLiteraria();
        //ConsultarColecao();
        //ConsultarTag();
        //ConsultarGenero();
        ConsultarTipoAcervo();
        ConsultarOutros();
        //jTextFieldisbn.requestFocus();
        //ConsultarTombo();
    }

    // Sair do Janela
    public void Sair() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        dispose();
    }
    
    public void LimparCampos(){
        jComboBoxTipo.setSelectedItem(" ");
        jTextFieldEditora.setText("");
        jComboBoxTipo.setSelectedItem("");
        //jComboBoxColecao.setSelectedItem("");
        jTextFieldTituloAcervo.setText("");
        jTextFieldSubTituloAcervo.setText("");
        jTextFieldNPaginas.setText("");
        jTextFieldVolume.setText("");
        jComboBoxLinguagem.setSelectedItem("");
        jTextFieldTombo.setText("");
        jTextAreaResumo.setText("");
        //jTextFieldQtd.setText("1");
    }
    
    public void LimparCampos2(){
        jTextFieldisbn.setText("");
        LimparCampos();
    }

    
    // Autor
       
       
        public void InserirAutorAcervo(){
          try{
            BaseCTR inserirAutorAcervoCTR = new BaseCTR();	
            if ("".equals(jTextFieldisbn.getText())){
               JOptionPane.showMessageDialog(null,"Campo ISBN em Branco. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);   
               jTextFieldisbn.requestFocus();
            }else{
                int i = JOptionPane.showConfirmDialog(null, "Deseja Inserir Autor(a) ao Acervo? ","Informação: ", JOptionPane.YES_NO_OPTION);
                if(i == JOptionPane.YES_OPTION){
                    inserirAutorAcervoCTR.InserirAutorAcervo(jTextFieldisbn.getText(),jTextFieldAutor.getText());
                    JOptionPane.showMessageDialog(null,"Autor(a) Inserido com Sucesso ao Acervo. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
                    MostrarDadosTabelaAutorAcervo();
                }
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null,"Campos de Dados em Branco... ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
		System.out.println(e.getMessage());
	}    
        }
        
        
        public void MostrarDadosTabelaAutorAcervo(){
        try{
            BaseCTR consultarAutorAcervoCTR = new BaseCTR();
            ResultSet rs=null;
            rs=consultarAutorAcervoCTR.ConsultarAutorAcervo(jTextFieldisbn.getText().toUpperCase().replace(".", "").replace("-", ""));
            DefaultTableModel modelo = (DefaultTableModel) jTableAutor.getModel();
            modelo.setNumRows(0);
            while (rs.next()){
                Object[] novaLinha = new Object[2];
                novaLinha[0] = rs.getString("acervo_autor_id");
                novaLinha[1] = rs.getString("autor_nome");
                modelo.addRow(novaLinha);
            }
        }
        catch (Exception e){
            System.out.println(e.getMessage());    
           }
    }
        
     
        public void RemoverAutorAcervo(){
            try{
                BaseCTR removerAutorAcervoCTR = new BaseCTR();	
            if ("".equals(jTextFieldisbn.getText())){
               JOptionPane.showMessageDialog(null,"Campo ISBN em Branco. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);   
               jTextFieldisbn.requestFocus();
            }else{
                int i = JOptionPane.showConfirmDialog(null, "Deseja Remover Autor(a) do Acervo? ","Informação: ", JOptionPane.YES_NO_OPTION);
                if(i == JOptionPane.YES_OPTION){
                    removerAutorAcervoCTR.RemoverAutorAcervo(Integer.parseInt(jTextFieldAutorCodigo.getText()),jTextFieldisbn.getText());
                    JOptionPane.showMessageDialog(null,"Autor(a) Removido com Sucesso do Acervo. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
                    MostrarDadosTabelaAutorAcervo();
                }  
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null,"Campos de Dados em Branco... ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
		System.out.println(e.getMessage());
	}
        }
        

        // Editora
        
        
        public void InserirEditora(){
        try{
            BaseCTR inserirEditoraCTR = new BaseCTR();
            String editora = JOptionPane.showInputDialog("Informe a Editora:","");
            if ("".equals(editora)){
                JOptionPane.showMessageDialog(null,"Campo em Branco. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
            }
            else{
                inserirEditoraCTR.InserirEditora(editora.toUpperCase());
		JOptionPane.showMessageDialog(null,""+editora+" Inserido com Sucesso. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
                //ConsultarEditora();
            }
	}
            catch(Exception e){
		System.out.println(e.getMessage());
	}
    }
        
        
       /** 
        public void ConsultarEditora(){
        try{
            EscolaCTR consultarEditoraCTR = new EscolaCTR();
            ResultSet rs=null;
            //rs=consultarEditoraCTR.ConsultarEditora();
            jComboBoxEditora.removeAllItems();
            while(rs.next()){       
                jComboBoxEditora.addItem(rs.getString("acervo_editora_nome"));    
            }
         }
         catch (Exception e){
            System.out.println(e.getMessage());    
            }
    }
       
        */
        
        // Classificação Literária
        
        
public void InserirClassLiteraria(){
        try{
            BaseCTR inserirClassLiterariaCTR = new BaseCTR();
            String classliteraria = JOptionPane.showInputDialog("Informe a Classificação Literaria:","");
            if ("".equals(classliteraria)){
                JOptionPane.showMessageDialog(null,"Campo em Branco. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
            }
            else{
                inserirClassLiterariaCTR.InserirClassLiteraria(classliteraria.toUpperCase());
		JOptionPane.showMessageDialog(null,""+classliteraria+" Inserido com Sucesso. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
                ConsultarClassLiteraria();
            }
	}
            catch(Exception e){
		System.out.println(e.getMessage());
	}
    }

        
   public void ConsultarClassLiteraria(){
        try{
            BaseCTR consultarClassLiterariaCTR = new BaseCTR();
            ResultSet rs=null;
            rs=consultarClassLiterariaCTR.ConsultarClassLiteraria();
            jComboBoxClassLiter.removeAllItems();
            while(rs.next()){       
                jComboBoxClassLiter.addItem(rs.getString("classificacao_literaria_nome"));    
            }
         }
         catch (Exception e){
            System.out.println(e.getMessage());    
            }
    }
   
        
        public void InserirClassLiterAcervo(){
          try{
                BaseCTR inserirClassLiterAcervoCTR = new BaseCTR();	
            if ("".equals(jTextFieldisbn.getText())){
               JOptionPane.showMessageDialog(null,"Campo ISBN em Branco. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);   
               jTextFieldisbn.requestFocus();
            }else{
                int i = JOptionPane.showConfirmDialog(null, "Deseja Inserir Classificação Literária ao Acervo? ","Informação: ", JOptionPane.YES_NO_OPTION);
                if(i == JOptionPane.YES_OPTION){
                    inserirClassLiterAcervoCTR.InserirClassLiterariaAcervo(jTextFieldisbn.getText(),jComboBoxClassLiter.getSelectedItem().toString());
                    JOptionPane.showMessageDialog(null,"Classificação Literária Inserido com Sucesso ao Acervo. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
                    MostrarDadosTabelaClassLiterAcervo();
                }
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null,"Campos de Dados em Branco... ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
		System.out.println(e.getMessage());
            }    
        }
        
        
        public void MostrarDadosTabelaClassLiterAcervo(){
        try{
            BaseCTR consultarClassLiterAcervoCTR = new BaseCTR();
            ResultSet rs=null;
            rs=consultarClassLiterAcervoCTR.ConsultarClassLiterAcervo(jTextFieldisbn.getText().toUpperCase().replace(".", "").replace("-", ""));
            DefaultTableModel modelo = (DefaultTableModel) jTableClassLiter.getModel();
            modelo.setNumRows(0);
            while (rs.next()){
                Object[] novaLinha = new Object[2];
                novaLinha[0] = rs.getString("acervo_class_liter_id");
                novaLinha[1] = rs.getString("classificacao_literaria_nome");
                modelo.addRow(novaLinha);
            }
        }
        catch (Exception e){
            System.out.println(e.getMessage());    
            }
    }
        
        public void RemoverClassLiterAcervo(){
            try{
                BaseCTR removerClassLiterAcervoCTR = new BaseCTR();	
            if ("".equals(jTextFieldisbn.getText())){
               JOptionPane.showMessageDialog(null,"Campo ISBN em Branco. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);   
               jTextFieldisbn.requestFocus();
            }else{
                int i = JOptionPane.showConfirmDialog(null, "Deseja Remover Classificação Literária do Acervo? ","Informação: ", JOptionPane.YES_NO_OPTION);
                if(i == JOptionPane.YES_OPTION){
                    removerClassLiterAcervoCTR.RemoverClassLiterAcervo(Integer.parseInt(jTextFieldClassLiterCodigo.getText()),jTextFieldisbn.getText());
                    JOptionPane.showMessageDialog(null,"Classificação Literária Removido com Sucesso do Acervo. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
                    MostrarDadosTabelaClassLiterAcervo();
                }
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null,"Campos de Dados em Branco... ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
		System.out.println(e.getMessage());
            }
        }
        
        
        // Tag
        

        public void InserirTagAcervo(){
          try{
            BaseCTR inserirTagAcervoCTR = new BaseCTR();	
            if ("".equals(jTextFieldisbn.getText())){
               JOptionPane.showMessageDialog(null,"Campo ISBN em Branco. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);   
               jTextFieldisbn.requestFocus();
            }else{
                int i = JOptionPane.showConfirmDialog(null, "Deseja Inserir Tag ao Acervo? ","Informação: ", JOptionPane.YES_NO_OPTION);
                if(i == JOptionPane.YES_OPTION){
                    inserirTagAcervoCTR.InserirTagAcervo(jTextFieldisbn.getText(),jTextFieldTag.getText().toUpperCase());
                    JOptionPane.showMessageDialog(null,"Tag Inserido com Sucesso ao Acervo. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
                    MostrarDadosTabelaTagAcervo();
                }
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null,"Campos de Dados em Branco... ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
		System.out.println(e.getMessage());
            }    
        }
        
        
        public void MostrarDadosTabelaTagAcervo(){
        try{
            BaseCTR consultarTagAcervoCTR = new BaseCTR();
            ResultSet rs=null;
            rs=consultarTagAcervoCTR.ConsultarTagAcervo(jTextFieldisbn.getText().toUpperCase().replace(".", "").replace("-", ""));
            DefaultTableModel modelo = (DefaultTableModel) jTableTag.getModel();
            modelo.setNumRows(0);
            while (rs.next()){
                Object[] novaLinha = new Object[2];
                novaLinha[0] = rs.getString("acervo_tag_id");
                novaLinha[1] = rs.getString("tag_nome");
                modelo.addRow(novaLinha);
            }
        }
        catch (Exception e){
            System.out.println(e.getMessage());    
            }
    }
        
        public void RemoverTagAcervo(){
            try{
            BaseCTR removerTagAcervoCTR = new BaseCTR();	
            if ("".equals(jTextFieldisbn.getText())){
               JOptionPane.showMessageDialog(null,"Campo ISBN em Branco. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);   
               jTextFieldisbn.requestFocus();
            }else{
                int i = JOptionPane.showConfirmDialog(null, "Deseja Remover Gênero/Tag do Acervo? ","Informação: ", JOptionPane.YES_NO_OPTION);
                if(i == JOptionPane.YES_OPTION){
                    removerTagAcervoCTR.RemoverTagAcervo(Integer.parseInt(jTextFieldTagCodigo.getText()),jTextFieldisbn.getText());
                    JOptionPane.showMessageDialog(null,"Gênero/Tag Removido com Sucesso do Acervo. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
                    MostrarDadosTabelaTagAcervo();
                }
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null,"Campos de Dados em Branco... ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
		System.out.println(e.getMessage());
            }
        }
        
        
        // Gênero
        

        public void InserirGeneroAcervo(){
          try{
            BaseCTR inserirGeneroAcervoCTR = new BaseCTR();	
            if ("".equals(jTextFieldisbn.getText())){
               JOptionPane.showMessageDialog(null,"Campo ISBN em Branco. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);   
               jTextFieldisbn.requestFocus();
            }else{
                int i = JOptionPane.showConfirmDialog(null, "Deseja Inserir Gênero ao Acervo? ","Informação: ", JOptionPane.YES_NO_OPTION);
                if(i == JOptionPane.YES_OPTION){
                    inserirGeneroAcervoCTR.InserirGeneroAcervo(jTextFieldisbn.getText(),jComboBoxGenero.getSelectedItem().toString());
                    JOptionPane.showMessageDialog(null,"Gênero Inserido com Sucesso ao Acervo. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
                    MostrarDadosTabelaGeneroAcervo();
                }
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null,"Campos de Dados em Branco... ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
		System.out.println(e.getMessage());
            }    
        }
        
 
        public void InserirGenero(){
        try{
            BaseCTR inserirGeneroCTR = new BaseCTR();
            String genero = JOptionPane.showInputDialog("Informe o Gênero","");
            if ("".equals(genero)){
                JOptionPane.showMessageDialog(null,"Campo em Branco. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
            }
            else{
                inserirGeneroCTR.InserirGenero(genero.toUpperCase());
		JOptionPane.showMessageDialog(null,""+genero+" Inserido com Sucesso. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
                ConsultarGenero();
            }
	}
            catch(Exception e){
		System.out.println(e.getMessage());
	}
    }
        

        public void ConsultarGenero(){
        try{
            BaseCTR consultarGeneroCTR = new BaseCTR();
            ResultSet rs=null;
            rs=consultarGeneroCTR.ConsultarGenero();
            jComboBoxGenero.removeAllItems();
            while(rs.next()){       
                jComboBoxGenero.addItem(rs.getString("genero_nome"));    
            }
         }
         catch (Exception e){
            System.out.println(e.getMessage());    
            }
    }
        
        
        public void MostrarDadosTabelaGeneroAcervo(){
        try{
            BaseCTR consultarGeneroAcervoCTR = new BaseCTR();
            ResultSet rs=null;
            rs=consultarGeneroAcervoCTR.ConsultarGeneroAcervo(jTextFieldisbn.getText().toUpperCase().replace(".", "").replace("-", ""));
            DefaultTableModel modelo = (DefaultTableModel) jTableGenero.getModel();
            modelo.setNumRows(0);
            while (rs.next()){
                Object[] novaLinha = new Object[2];
                novaLinha[0] = rs.getString("acervo_genero_id");
                novaLinha[1] = rs.getString("genero_nome");
                modelo.addRow(novaLinha);
            }
        }
        catch (Exception e){
            System.out.println(e.getMessage());    
            }
    }
        
        public void RemoverGeneroAcervo(){
            try{
            BaseCTR removerGeneroAcervoCTR = new BaseCTR();	
            if ("".equals(jTextFieldisbn.getText())){
               JOptionPane.showMessageDialog(null,"Campo ISBN em Branco. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);   
               jTextFieldisbn.requestFocus();
            }else{
                int i = JOptionPane.showConfirmDialog(null, "Deseja Remover Gênero do Acervo? ","Informação: ", JOptionPane.YES_NO_OPTION);
                if(i == JOptionPane.YES_OPTION){
                    removerGeneroAcervoCTR.RemoverGeneroAcervo(Integer.parseInt(jTextFieldGeneroCodigo.getText()),jTextFieldisbn.getText());
                    JOptionPane.showMessageDialog(null,"Gênero Removido com Sucesso do Acervo. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
                    MostrarDadosTabelaGeneroAcervo();
                }
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null,"Campos de Dados em Branco... ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
		System.out.println(e.getMessage());
            }
        }
        
        
        // Edição
        

        public void InserirEdicaoAcervo(){
          try{
            BaseCTR inserirEdicaoAcervoCTR = new BaseCTR();	
            if ("".equals(jTextFieldisbn.getText()) || "".equals(jTextFieldEdicaoNumero.getText())){
               JOptionPane.showMessageDialog(null,"Campo ISBN ou Campo Número está em Branco. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);   
               jTextFieldisbn.requestFocus();
            }else{
                int i = JOptionPane.showConfirmDialog(null, "Deseja Inserir Edição ao Acervo? ","Informação: ", JOptionPane.YES_NO_OPTION);
                if(i == JOptionPane.YES_OPTION){
                    inserirEdicaoAcervoCTR.InserirEdicaoAcervo(jTextFieldisbn.getText(),jTextFieldEdicaoNumero.getText().toUpperCase(),jTextFieldEdicaoCidade.getText().toUpperCase(),jTextFieldEdicaoAno.getText().toUpperCase());
                    JOptionPane.showMessageDialog(null,"Edição Inserido com Sucesso ao Acervo. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
                    MostrarDadosTabelaEdicaoAcervo();
                }  
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null,"Campos de Dados em Branco... ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
		System.out.println(e.getMessage());
            }    
        }
        
        
        public void MostrarDadosTabelaEdicaoAcervo(){
        try{
            BaseCTR consultarEdicaoAcervoCTR = new BaseCTR();
            ResultSet rs=null;
            rs=consultarEdicaoAcervoCTR.ConsultarEdicaoAcervo(jTextFieldisbn.getText().toUpperCase().replace(".", "").replace("-", ""));
            DefaultTableModel modelo = (DefaultTableModel) jTableEdicao.getModel();
            modelo.setNumRows(0);
            while (rs.next()){
                Object[] novaLinha = new Object[4];
                novaLinha[0] = rs.getString("acervo_edicao_id");
                novaLinha[1] = rs.getString("acervo_edicao_numero");
                novaLinha[2] = rs.getString("acervo_edicao_cidade");
                novaLinha[3] = rs.getString("acervo_edicao_ano");
                modelo.addRow(novaLinha);
            }
        }
        catch (Exception e){
            System.out.println(e.getMessage());    
            }
    }
        
        public void RemoverEdicaoAcervo(){
            try{
            BaseCTR removerEdicaoAcervoCTR = new BaseCTR();	
            if ("".equals(jTextFieldisbn.getText())){
               JOptionPane.showMessageDialog(null,"Campo ISBN em Branco. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);   
               jTextFieldisbn.requestFocus();
            }else{
                int i = JOptionPane.showConfirmDialog(null, "Deseja Remover Edição do Acervo? ","Informação: ", JOptionPane.YES_NO_OPTION);
                if(i == JOptionPane.YES_OPTION){
                    removerEdicaoAcervoCTR.RemoverEdicaoAcervo(Integer.parseInt(jTextFieldEdicaoCodigo.getText()),jTextFieldisbn.getText());
                    JOptionPane.showMessageDialog(null,"Edição Removido com Sucesso do Acervo. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
                    MostrarDadosTabelaEdicaoAcervo();
                }
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null,"Campos de Dados em Branco... ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
		System.out.println(e.getMessage());
            }
        }
        
        // Outros
        

        public void InserirOutrosAcervo(){
          try{
            BaseCTR inserirOutrosAcervoCTR = new BaseCTR();	
            if ("".equals(jTextFieldisbn.getText()) || "".equals(jTextFieldOutrosNome.getText())){
               JOptionPane.showMessageDialog(null,"Campo ISBN ou Campo Nome em Branco. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);   
               jTextFieldisbn.requestFocus();
            }else{
                int i = JOptionPane.showConfirmDialog(null, "Deseja Inserir esta Informação ao Acervo? ","Informação: ", JOptionPane.YES_NO_OPTION);
                if(i == JOptionPane.YES_OPTION){
                    inserirOutrosAcervoCTR.InserirOutrosAcervo(jTextFieldisbn.getText(),jComboBoxOutros.getSelectedItem().toString(),jTextFieldOutrosNome.getText().toUpperCase());
                    JOptionPane.showMessageDialog(null,"Informação Inserido com Sucesso ao Acervo. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
                    MostrarDadosTabelaOutrosAcervo();
                    jTextFieldOutrosNome.setText("");
                    jTextFieldOutrosNome.requestFocus();
                }
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null,"Campos de Dados em Branco... ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
		System.out.println(e.getMessage());
            }    
        }
        
 
        public void InserirOutros(){
        try{
            BaseCTR inserirOutrosCTR = new BaseCTR();
            String outros = JOptionPane.showInputDialog("Informe a Informação","");
            if ("".equals(outros)){
                JOptionPane.showMessageDialog(null,"Campo em Branco. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
            }
            else{
                inserirOutrosCTR.InserirOutros(jComboBoxTipo.getSelectedItem().toString(),outros.toUpperCase());
		JOptionPane.showMessageDialog(null,""+outros+" Inserido com Sucesso. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
                ConsultarOutros();
            }
            }
            catch(Exception e){
		System.out.println(e.getMessage());
            }
    }
 

    public void ConsultarOutros(){
        try{
            BaseCTR consultarOutrosCTR = new BaseCTR();
            ResultSet rs=null;
            rs=consultarOutrosCTR.ConsultarOutros(jComboBoxTipo.getSelectedItem().toString());
            jComboBoxOutros.removeAllItems();
            while(rs.next()){       
                jComboBoxOutros.addItem(rs.getString("outros_nome"));    
            }
         }
         catch (Exception e){
            System.out.println(e.getMessage());    
            }
    }
        
        
        public void MostrarDadosTabelaOutrosAcervo(){
        try{
            BaseCTR consultarOutrosAcervoCTR = new BaseCTR();
            ResultSet rs=null;
            rs=consultarOutrosAcervoCTR.ConsultarOutrosAcervo(jTextFieldisbn.getText().toUpperCase().replace(".", "").replace("-", ""));
            DefaultTableModel modelo = (DefaultTableModel) jTableOutros.getModel();
            modelo.setNumRows(0);
            while (rs.next()){
                Object[] novaLinha = new Object[3];
                novaLinha[0] = rs.getString("acervo_outros_id");
                novaLinha[1] = rs.getString("outros_nome");
                novaLinha[2] = rs.getString("acervo_outros_nome2");
                modelo.addRow(novaLinha);
            }
        }
        catch (Exception e){
            System.out.println(e.getMessage());    
            }
    }
        
        public void RemoverOutrosAcervo(){
            try{
            BaseCTR removerOutrosAcervoCTR = new BaseCTR();	
            if ("".equals(jTextFieldisbn.getText())){
               JOptionPane.showMessageDialog(null,"Campo ISBN em Branco. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);   
               jTextFieldisbn.requestFocus();
            }else{
                int i = JOptionPane.showConfirmDialog(null, "Deseja Remover esta Informação do Acervo? ","Informação: ", JOptionPane.YES_NO_OPTION);
                if(i == JOptionPane.YES_OPTION){
                    removerOutrosAcervoCTR.RemoverOutrosAcervo(Integer.parseInt(jTextFieldOutrosCodigo.getText()),jTextFieldisbn.getText());
                    JOptionPane.showMessageDialog(null,"Informação Removido com Sucesso do Acervo. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
                    MostrarDadosTabelaOutrosAcervo();
                }
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null,"Campos de Dados em Branco... ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
		System.out.println(e.getMessage());
            }
        }
        
        
        // Acervo
        

        public void InserirAcervo(){
          try{
            BaseCTR inserirAcervoCTR = new BaseCTR();	
            if ("".equals(jTextFieldisbn.getText()) || "".equals(jTextFieldTituloAcervo.getText())){
               JOptionPane.showMessageDialog(null,"Campo ISBN ou Campo Nome ou Campo Tombo em Branco. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);   
               jTextFieldisbn.requestFocus();
            }else{
                int i = JOptionPane.showConfirmDialog(null, "Deseja Inserir este Acervo a Biblioteca? ","Informação: ", JOptionPane.YES_NO_OPTION);
                if(i == JOptionPane.YES_OPTION){
                    inserirAcervoCTR.InserirAcervo(jTextFieldisbn.getText().replace("-", ""),jTextFieldTituloAcervo.getText().toUpperCase().replace("  ", "").replace("Á", "A").replace("á", "A").replace("É", "E").replace("é", "E").replace("Í", "I").replace("í", "I").replace("ã", "A").replace("Ã", "A"),jTextFieldSubTituloAcervo.getText().toUpperCase().replace("  ", "").replace("Á", "A").replace("á", "A").replace("É", "E").replace("é", "E").replace("Í", "I").replace("í", "I").replace("ã", "A").replace("Ã", "A"),jComboBoxTipo.getSelectedItem().toString(),jTextFieldEditora.getText().toUpperCase(),jTextFieldColecao.getText().toUpperCase(),jTextFieldNPaginas.getText().toUpperCase(),jTextFieldVolume.getText().toUpperCase(),jComboBoxLinguagem.getSelectedItem().toString(),jTextAreaResumo.getText().toUpperCase());
                    JOptionPane.showMessageDialog(null,"Informação Inserido com Sucesso ao Acervo. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
                    //LimparCampos();
                }
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null,"Campos de Dados em Branco... ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
		System.out.println(e.getMessage());
	}    
        }
        
        public void AlterarAcervo(){
          try{
            BaseCTR alterarAcervoCTR = new BaseCTR();	
            if ("".equals(jTextFieldisbn.getText()) || "".equals(jTextFieldTituloAcervo.getText())){
               JOptionPane.showMessageDialog(null,"Campo ISBN ou Campo Nome em Branco. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);   
               jTextFieldisbn.requestFocus();
            }else{
                int i = JOptionPane.showConfirmDialog(null, "Deseja Alterar este Acervo da Biblioteca? ","Informação: ", JOptionPane.YES_NO_OPTION);
                if(i == JOptionPane.YES_OPTION){
                    alterarAcervoCTR.AlterarAcervo(jTextFieldisbn.getText(),jTextFieldTituloAcervo.getText().toUpperCase(),jTextFieldSubTituloAcervo.getText().toUpperCase(),jComboBoxTipo.getSelectedItem().toString(),jTextFieldEditora.getText().toUpperCase(),jTextFieldColecao.getText().toUpperCase(),jTextFieldNPaginas.getText().toUpperCase(),jTextFieldVolume.getText().toUpperCase(),jComboBoxLinguagem.getSelectedItem().toString(),jTextAreaResumo.getText().toUpperCase());
                    JOptionPane.showMessageDialog(null,"Informação Alterada com Sucesso do Acervo. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
                }
                }
                }
            catch(Exception e){
                JOptionPane.showMessageDialog(null,"Campos de Dados em Branco... ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
		System.out.println(e.getMessage());
            }    
        }
        
    public void ConsultarAcervoVerificador(){
        try{
            BaseCTR consultarAcervoCTR = new BaseCTR();
            ResultSet rs=null;
            rs=consultarAcervoCTR.ConsultarAcervoVerificador(jTextFieldisbn.getText().toUpperCase().replace(".", "").replace("-", ""));
            int v = 0;
            while(rs.next()){       
                v = (rs.getInt("verificador"));  
            }
            if (v == 0){
                InserirAcervo();
            }else{
                AlterarAcervo();
            }
         }
         catch (Exception e){
            System.out.println(e.getMessage());    
            }
    }
    
    public void ConsultarAcervo(){
        try{
            BaseCTR consultarAcervoCTR = new BaseCTR();
            ResultSet rs=null;
            rs=consultarAcervoCTR.ConsultarAcervo(jTextFieldisbn.getText().toUpperCase().replace(".", "").replace("-", ""));
            while(rs.next()){       
                jComboBoxTipo.setSelectedItem((rs.getString("acervo_tipo")));
                jTextFieldEditora.setText((rs.getString("acervo_editora")));
                jTextFieldColecao.setText((rs.getString("acervo_colecao")));
                jTextFieldTituloAcervo.setText((rs.getString("acervo_nome")));
                jTextFieldSubTituloAcervo.setText((rs.getString("acervo_subtitulo")));
                jTextFieldNPaginas.setText((rs.getString("acervo_paginas")));
                jTextFieldVolume.setText((rs.getString("acervo_volume")));
                jComboBoxLinguagem.setSelectedItem((rs.getString("acervo_linguagem")));
                jTextAreaResumo.setText((rs.getString("acervo_resumo")));
            }
         }
         catch (Exception e){
            System.out.println(e.getMessage());    
         }
    }
    
    
    
    // Tombo

       
        public void InserirTomboAcervo(){
          try{
            BaseCTR inserirTomboAcervoCTR = new BaseCTR();	
            if ("".equals(jTextFieldisbn.getText()) || "".equals(jTextFieldTombo.getText())){
               JOptionPane.showMessageDialog(null,"Campo ISBN ou Campo Tombo em Branco. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);   
               jTextFieldisbn.requestFocus();
            }else{
                int i = JOptionPane.showConfirmDialog(null, "Deseja Inserir Tombo ao Acervo? ","Informação: ", JOptionPane.YES_NO_OPTION);
                if(i == JOptionPane.YES_OPTION){
                    inserirTomboAcervoCTR.InserirTomboAcervo(jTextFieldisbn.getText(),jTextFieldTombo.getText().toUpperCase().replace(".", "-"));
                    JOptionPane.showMessageDialog(null,"Tombo Inserido com Sucesso ao Acervo. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
                    MostrarDadosTabelaTomboAcervo();
                }
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null,"Campos de Dados em Branco... ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
		System.out.println(e.getMessage());
            }    
        }
        
        
        public void MostrarDadosTabelaTomboAcervo(){
        try{
            BaseCTR consultarTomboAcervoCTR = new BaseCTR();
            ResultSet rs=null;
            rs=consultarTomboAcervoCTR.ConsultarTomboAcervo(jTextFieldisbn.getText().toUpperCase().replace(".", "").replace("-", ""));
            DefaultTableModel modelo = (DefaultTableModel) jTableTombo.getModel();
            modelo.setNumRows(0);
            while (rs.next()){
                Object[] novaLinha = new Object[2];
                novaLinha[0] = rs.getString("acervo_tombo_empresa_id");
                novaLinha[1] = rs.getString("acervo_tombo_empresa_numero");
                modelo.addRow(novaLinha);
            }
        }
        catch (Exception e){
            System.out.println(e.getMessage());    
            }
    }
        
     
        public void RemoverTomboAcervo(){
            try{
            BaseCTR removerTomboAcervoCTR = new BaseCTR();	
            if ("".equals(jTextFieldisbn.getText())){
               JOptionPane.showMessageDialog(null,"Campo ISBN em Branco. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);   
               jTextFieldisbn.requestFocus();
            }else{
                int i = JOptionPane.showConfirmDialog(null, "Deseja Remover Tombo do Acervo? ","Informação: ", JOptionPane.YES_NO_OPTION);
                if(i == JOptionPane.YES_OPTION){
                    removerTomboAcervoCTR.RemoverTomboAcervo(Integer.parseInt(jTextFieldTomboCodigo.getText()),jTextFieldisbn.getText());
                    JOptionPane.showMessageDialog(null,"Tombo Removido com Sucesso do Acervo. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
                    MostrarDadosTabelaTomboAcervo();
                }
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null,"Campos de Dados em Branco... ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
		System.out.println(e.getMessage());
            }
        }
        
        public void AlterarTomboAcervo(){
            try{
            BaseCTR alterarTomboAcervoCTR = new BaseCTR();	
            if ("".equals(jTextFieldisbn.getText())){
               JOptionPane.showMessageDialog(null,"Campo ISBN em Branco. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);   
               jTextFieldisbn.requestFocus();
            }else{
                int i = JOptionPane.showConfirmDialog(null, "Deseja Alterar/Re-Inserir Tombo do Acervo? ","Informação: ", JOptionPane.YES_NO_OPTION);
                if(i == JOptionPane.YES_OPTION){
                    alterarTomboAcervoCTR.AlterarTomboAcervo(jTextFieldTombo.getText().toUpperCase().replace(".", "-"), jTextFieldisbn.getText());
                    JOptionPane.showMessageDialog(null,"Tombo Alterar com Sucesso do Acervo. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
                    MostrarDadosTabelaTomboAcervo();
                }
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null,"Campos de Dados em Branco... ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
		System.out.println(e.getMessage());
            }
        }
        
        public void VerificarTomboAcervo(){
        try{
            BaseCTR verificarAcervoCTR = new BaseCTR();
            ResultSet rs=null;
            rs=verificarAcervoCTR.VerificarTomboAcervo(jTextFieldTombo.getText(), jTextFieldisbn.getText());
            int v = 0;
            while(rs.next()){       
                v = (rs.getInt("verificador"));
            }
            if (v == 0){
                InserirTomboAcervo();
            }
            if (v == 1){
                AlterarTomboAcervo();
            }  
         }
         catch (Exception e){
            System.out.println(e.getMessage());    
            }
    }
        
        public void ConsultarVerificadorTombo(){
        try{
            BaseCTR consultarCTR = new BaseCTR();
            ResultSet rs=null;
            rs=consultarCTR.VerificadorRelatarTombo(jTextFieldTombo.getText().toUpperCase());
            int v = 0;
            while(rs.next()){       
                v = (rs.getInt("verificador"));  
            }
            if (v >= 1){
                JOptionPane.showMessageDialog(null,"Existe Acervo com o mesmo Tombo. Verifique...","Informação: ",JOptionPane.INFORMATION_MESSAGE);
                jTextFieldTombo.setText("");
                //jTextFieldTomboTitulo.setText("");
                jTextFieldTombo.requestFocus();
                //BibliotecaConsultaVIEW f = new BibliotecaConsultaVIEW();
                //jDesktopPaneSGUVIEW.add(f);
                //f.setVisible(true);
            }else{
                VerificarTomboAcervo();
            }
         }
         catch (Exception e){
            System.out.println(e.getMessage());    
            }
        
    }
        
        
        // Tipo Acervo
        
        
        public void InserirTipoAcervo(){
        try{
            BaseCTR inserirTipoAcervoCTR = new BaseCTR();
            String tipoacervo = JOptionPane.showInputDialog("Informe o Tipo do Acervo:","");
            if ("".equals(tipoacervo)){
                JOptionPane.showMessageDialog(null,"Campo em Branco. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
            }
            else{
                inserirTipoAcervoCTR.InserirTipoAcervo(tipoacervo.toUpperCase());
		JOptionPane.showMessageDialog(null,""+tipoacervo+" Inserido com Sucesso. ","Informação: ",JOptionPane.INFORMATION_MESSAGE);
                ConsultarTipoAcervo();
            }
	}
            catch(Exception e){
		System.out.println(e.getMessage());
	}
    }
        
        
        
        public void ConsultarTipoAcervo(){
        try{
            BaseCTR consultarTipoAcervoCTR = new BaseCTR();
            ResultSet rs=null;
            rs=consultarTipoAcervoCTR.ConsultarTipoAcervo();
            jComboBoxTipo.removeAllItems();
            while(rs.next()){       
                jComboBoxTipo.addItem(rs.getString("acervo_tipo_nome"));    
            }
         }
         catch (Exception e){
            System.out.println(e.getMessage());    
            }
        }
        
}

